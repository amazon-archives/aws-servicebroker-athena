AWSTemplateFormatVersion: 2010-09-09
Description: 'Template for Creating an Athena Table. qs-1nt0fs922'
Parameters:
  S3Source:
    Type: String
    Description: The S3 location for the source data.
  TableColumns:
    Type: String
    Description: "The columns and their types in the format: (col_name data_type [COMMENT col_comment] [, ...] )"
  RowFormat:
    Type: String
    AllowedValues:
     - DELIMITED
     - SERDE
    Description: The row format of the source data.
  SerdeName:
    Type: String
    Default: ""
    Description: SERDE Name, only applicable if "Row Format" is set to SERDE.
  SerdeProperties:
    Type: String
    Description: SERDE Properties in the format ("property_name" = "property_value", "property_name" = "property_value" [, ...] ). Only applicable if "Row Format" is set to SERDE.
    Default: ""
  DBName:
    Type: String
    Description: Athena Database name, will be created if it does not exist
  TableName:
    Type: String
    Description: Athena table name
Resources:
  OutputBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
  CreateTable:
    Type: "AWS::CloudFormation::CustomResource"
    Properties: 
      ServiceToken: !GetAtt CreateTableFunction.Arn
      DBName: !Ref DBName
      TableName: !Ref TableName
      Columns: !Ref TableColumns
      SourceUri: !Ref S3Source
      SerdeName: !Ref SerdeName
      SerdeProperties: !Ref SerdeProperties
      RowFormat: !Ref RowFormat
      OutputLocation: !Sub "s3://${OutputBucket}/"
  CreateTableFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import boto3
          import traceback
          from os import environ
          from time import sleep


          region = environ['AWS_REGION']
          athena_client = boto3.client('athena', region_name=region)
          query_template = """
          CREATE EXTERNAL TABLE
            {db_name}.{table_name} {columns}
            ROW FORMAT {row_format}
            LOCATION '{location}';
          """
          serde_template = """SERDE {} WITH SERDEPROPERTIES {}"""


          def query_status(qid):
              response = athena_client.get_query_execution(QueryExecutionId=qid)
              return response['QueryExecution']['Status']['State']


          def lambda_handler(event, context):
              print(json.dumps(event))
              status = cfnresponse.FAILED
              response_data = {}
              physical_id = ''
              try:
                  query_dict = {
                      'db_name': event['ResourceProperties']['DBName'],
                      'table_name': event['ResourceProperties']['TableName'],
                      'columns': event['ResourceProperties']['Columns'],
                      'row_format': event['ResourceProperties']['RowFormat'],
                      'location': event['ResourceProperties']['SourceUri']
                  }
                  if query_dict['row_format'] == 'SERDE':
                      query_dict['row_format'] = serde_template.format(
                             event['ResourceProperties']['SerdeName'],
                             event['ResourceProperties']['SerdeProperties']
                      )
                  physical_id = "{}.{}".format(
                      query_dict['db_name'],
                      query_dict['table_name']
                  )
                  if event['RequestType'] == 'Create':
                      query = "CREATE DATABASE IF NOT EXISTS {};".format(query_dict['db_name'])
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      print("CREATE DATABASE Query ID: {}".format(query_id))
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                      query = query_template.format(**query_dict)
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      print("CREATE TABLE Query ID: {}".format(query_id))
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                  elif event['RequestType'] == 'Delete':
                      query = "DROP TABLE {}.{};".format(query_dict['db_name'], query_dict['table_name'])
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                  status = cfnresponse.SUCCESS
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
              finally:
                  cfnresponse.send(event, context, status, response_data, physical_id)
      Handler: index.lambda_handler
      Role: !GetAtt CreateTableRole.Arn
      Runtime: python2.7
      Timeout: 300
  CreateTableRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "CreateTablePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "athena:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "glue:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
Outputs:
  OutputLocation:
    Value: !Sub "s3://${OutputBucket}/"